'use client'

import { createContext, useContext, useEffect, useState } from 'react'
import { User, Session } from '@supabase/supabase-js'
import { createClient } from '@/lib/supabase/client'
import type { Database } from '@/types/database'

type UserProfile = Database['public']['Tables']['users']['Row']

interface AuthContextType {
  user: User | null
  profile: UserProfile | null
  session: Session | null
  loading: boolean
  signIn: (email: string, password: string) => Promise<{ error: any }>
  signUp: (email: string, password: string, fullName: string) => Promise<{ error: any }>
  signInWithProvider: (provider: 'google' | 'facebook') => Promise<{ error: any }>
  signOut: () => Promise<{ error: any }>
  resetPassword: (email: string) => Promise<{ error: any }>
}

const AuthContext = createContext<AuthContextType | undefined>(undefined)

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<User | null>(null)
  const [profile, setProfile] = useState<UserProfile | null>(null)
  const [session, setSession] = useState<Session | null>(null)
  const [loading, setLoading] = useState(true)
  
  // CRITICAL: Create supabase client only once
  const [supabase] = useState(() => createClient())

  // Fetch user profile
  const fetchProfile = async (userId: string) => {
    try {
      const { data, error } = await supabase
        .from('users')
        .select('*')
        .eq('id', userId)
        .single()

      if (error) {
        // If no profile exists (table might not exist yet), that's okay
        if (error.code === 'PGRST116' || error.message?.includes('relation "public.users" does not exist')) {
          console.log('Users table not found or no profile exists - this is expected for now')
          return null
        }
        console.error('Error fetching profile:', error)
        return null
      }

      return data
    } catch (error) {
      console.error('Error fetching profile:', error)
      return null
    }
  }

  // Create a fallback profile from auth user data
  const createFallbackProfile = (authUser: User): UserProfile => {
    return {
      id: authUser.id,
      email: authUser.email!,
      full_name: authUser.user_metadata?.full_name || authUser.user_metadata?.name || null,
      avatar_url: authUser.user_metadata?.avatar_url || null,
      username: null,
      bio: null,
      signup_ip: null,
      signup_country: null,
      last_login_ip: null,
      created_at: authUser.created_at,
      updated_at: new Date().toISOString(),
      subscription_tier: 'free',
      subscription_status: 'active',
      settings: null,
      stats: null
    }
  }

  useEffect(() => {
    console.log('AuthProvider: Setting up auth listener')
    
    // Get initial session
    const getSession = async () => {
      const { data: { session } } = await supabase.auth.getSession()
      setSession(session)
      setUser(session?.user ?? null)
      
      if (session?.user) {
        const userProfile = await fetchProfile(session.user.id)
        if (userProfile) {
          setProfile(userProfile)
        } else {
          // Use fallback profile from auth user data
          setProfile(createFallbackProfile(session.user))
        }
      }
      
      setLoading(false)
    }

    getSession()

    // Listen for auth changes
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        console.log('AuthProvider: Auth state changed', event)
        setSession(session)
        setUser(session?.user ?? null)
        
        if (session?.user) {
          const userProfile = await fetchProfile(session.user.id)
          if (userProfile) {
            setProfile(userProfile)
          } else {
            // Use fallback profile from auth user data
            setProfile(createFallbackProfile(session.user))
          }
        } else {
          setProfile(null)
        }
        
        setLoading(false)
      }
    )

    // CRITICAL: Clean up subscription
    return () => {
      console.log('AuthProvider: Cleaning up auth listener')
      subscription.unsubscribe()
    }
  }, []) // Empty dependency array is correct now since supabase is stable

  const signIn = async (email: string, password: string) => {
    const { error } = await supabase.auth.signInWithPassword({
      email,
      password,
    })
    return { error }
  }

  const signUp = async (email: string, password: string, fullName: string) => {
    const { data, error } = await supabase.auth.signUp({
      email,
      password,
      options: {
        data: {
          full_name: fullName,
        },
      },
    })

    // If signup successful, try to create user profile (will fail gracefully if table doesn't exist)
    if (data.user && !error) {
      try {
        const { error: profileError } = await supabase
          .from('users')
          .insert({
            id: data.user.id,
            email: data.user.email!,
            full_name: fullName,
            subscription_tier: 'free',
            subscription_status: 'active',
            settings: {
              privacy_level: 'private',
              notification_preferences: {
                email_notifications: true,
                push_notifications: true,
              },
              display_preferences: {
                theme: 'light',
                default_view: 'grid',
              },
            },
            stats: {
              total_collections: 0,
              total_resources: 0,
              followers_count: 0,
              following_count: 0,
            },
          })

        if (profileError) {
          console.log('Could not create user profile (table may not exist yet):', profileError.message)
        }
      } catch (error) {
        console.log('Could not create user profile (this is expected if database is not set up yet)')
      }
    }

    return { error }
  }

  const signInWithProvider = async (provider: 'google' | 'facebook') => {
    const { error } = await supabase.auth.signInWithOAuth({
      provider,
      options: {
        redirectTo: `${window.location.origin}/auth/callback`,
      },
    })
    return { error }
  }

  const signOut = async () => {
    const { error } = await supabase.auth.signOut()
    return { error }
  }

  const resetPassword = async (email: string) => {
    const { error } = await supabase.auth.resetPasswordForEmail(email, {
      redirectTo: `${window.location.origin}/auth/reset-password`,
    })
    return { error }
  }

  const value = {
    user,
    profile,
    session,
    loading,
    signIn,
    signUp,
    signInWithProvider,
    signOut,
    resetPassword,
  }

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>
}

export function useAuth() {
  const context = useContext(AuthContext)
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider')
  }
  return context
}